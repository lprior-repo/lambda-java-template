version: '3'

# AWS Lambda Java Template - Extreme DRY Taskfile
# Uses AWS Lambda containers for consistent native builds

vars:
  PROJECT_NAME: lambda-java-template
  AWS_REGION: us-east-1
  GRAALVM_VERSION: 21.0.2-graalce
  LAMBDA_CONTAINER: public.ecr.aws/lambda/provided:al2
  BUILD_DIR: ./build

tasks:
  default:
    desc: 🚀 Show available tasks
    cmds:
      - task --list

  # 🧹 Cleanup
  clean:
    desc: 🧹 Clean all build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - mvn clean -q

  # 🏗️ Native Build (Docker Container - Like CI)
  native:
    desc: ⚡ Build GraalVM native executables using AWS Lambda container
    deps: [clean]
    cmds:
      - echo "🚀 Building native executables in AWS Lambda container..."
      - docker pull {{.LAMBDA_CONTAINER}}
      - |
        docker run --rm \
          --entrypoint="" \
          -v "$(pwd)":/workspace \
          -w /workspace \
          {{.LAMBDA_CONTAINER}} \
          bash -c "
            yum update -y && \
            yum install -y tar gzip which unzip zip gcc gcc-c++ glibc-devel zlib-devel && \
            curl -s 'https://get.sdkman.io' | bash && \
            source ~/.sdkman/bin/sdkman-init.sh && \
            sdk install java {{.GRAALVM_VERSION}} && \
            sdk install maven && \
            export JAVA_HOME=~/.sdkman/candidates/java/current && \
            export PATH=\$JAVA_HOME/bin:\$PATH && \
            ./scripts/build.sh
          "

  # 🏗️ Build JARs only (for testing)
  jar:
    desc: 📦 Build JAR packages only
    cmds:
      - mvn clean package -DskipTests -q

  # 🧪 Test
  test:
    desc: 🧪 Run all tests
    cmds:
      - mvn test

  test:unit:
    desc: 🧪 Run unit tests only
    cmds:
      - mvn test -Dtest=*Test

  test:integration:
    desc: 🧪 Run integration tests only
    cmds:
      - mvn test -Dtest=*IntegrationTest

  # 🏗️ Infrastructure
  tf:init:
    desc: 🏗️ Initialize Terraform
    dir: terraform
    cmds:
      - terraform init

  tf:plan:
    desc: 📋 Plan Terraform changes
    dir: terraform
    deps: [tf:init]
    cmds:
      - terraform plan

  tf:apply:
    desc: 🚀 Apply Terraform changes
    dir: terraform
    deps: [native]
    cmds:
      - terraform apply -auto-approve

  tf:destroy:
    desc: 💥 Destroy infrastructure
    dir: terraform
    cmds:
      - terraform destroy -auto-approve

  tf:validate:
    desc: ✅ Validate Terraform
    dir: terraform
    deps: [tf:init]
    cmds:
      - terraform validate
      - terraform fmt -check

  # 🧪 Infrastructure Testing
  terratest:
    desc: 🧪 Run comprehensive Terratest infrastructure tests
    dir: infra-tests
    deps: [tf:apply]
    cmds:
      - go mod tidy
      - go test -v -timeout 20m -run TestLambdaIntegration

  terratest:modules:
    desc: 🧪 Run terraform-aws-modules validation tests
    dir: infra-tests  
    deps: [tf:apply]
    cmds:
      - go mod tidy
      - go test -v -timeout 15m -run TestLambdaIntegration/Terraform_Modules_Validation

  terratest:endpoints:
    desc: 🧪 Test all API endpoints functionality
    dir: infra-tests
    deps: [tf:apply]
    cmds:
      - go mod tidy
      - go test -v -timeout 10m -run TestLambdaIntegration/API_Gateway_Integration

  terratest:security:
    desc: 🧪 Run security configuration tests
    dir: infra-tests
    deps: [tf:apply]
    cmds:
      - go mod tidy
      - go test -v -timeout 10m -run TestLambdaIntegration/Security_Configuration

  terratest:performance:
    desc: 🧪 Run performance validation tests
    dir: infra-tests
    deps: [tf:apply]
    cmds:
      - go mod tidy
      - go test -v -timeout 5m -run TestLambdaIntegration/Performance_Validation

  test:infra:
    desc: 🧪 Complete infrastructure test suite (all validations)
    cmds:
      - echo "🧪 Running complete infrastructure test suite..."
      - task: terratest:modules
      - task: terratest:endpoints  
      - task: terratest:security
      - task: terratest:performance
      - echo "✅ All infrastructure tests completed!"

  test:endpoints:
    desc: 🌐 Validate all API endpoints comprehensively
    deps: [tf:apply]
    cmds:
      - echo "🌐 Running comprehensive endpoint validation..."
      - ./scripts/validate-endpoints.sh
      - echo "✅ Endpoint validation completed!"

  validate:
    desc: ✅ Complete validation suite (unit + integration + infrastructure + endpoints)
    cmds:
      - echo "🚀 Running complete validation suite..."
      - task: test:unit
      - task: test:integration
      - task: test:infra
      - task: test:endpoints
      - echo "🎉 All validations passed! System is production-ready."

  test:demo:
    desc: 🎬 Demonstrate comprehensive testing capabilities
    cmds:
      - echo "🎬 Running testing capabilities demonstration..."
      - ./scripts/test-demo.sh
      - echo "✅ Testing demo completed!"

  test:demo:interactive:
    desc: 🎬 Interactive testing demo (pauses between commands)
    cmds:
      - echo "🎬 Running interactive testing demonstration..."
      - ./scripts/test-demo.sh --demo
      - echo "✅ Interactive testing demo completed!"

  # 🚀 Full Deployment
  deploy:
    desc: 🚀 Full deployment (native + infrastructure)
    cmds:
      - task: native
      - task: tf:apply

  deploy:dev:
    desc: 🚀 Deploy to development
    env:
      TF_VAR_environment: dev
    cmds:
      - task: deploy

  # 📊 Monitoring
  logs:
    desc: 📊 View Lambda logs
    cmds:
      - aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/{{.PROJECT_NAME}}" --query 'logGroups[*].logGroupName'

  # 🧹 Complete cleanup
  nuke:
    desc: 💥 Complete cleanup (destroy + clean)
    cmds:
      - task: tf:destroy
      - task: clean
      - docker system prune -f

  # 🏃 Local Development & Debugging
  dev:local:
    desc: 🏃 Start local development environment
    cmds:
      - echo "🚀 Starting local development environment..."
      - docker-compose -f docker-compose.local.yml up -d
      - sleep 5
      - ./scripts/setup-local-dynamodb.sh
      - echo "✅ Local environment ready! Run 'task dev:run' to start the app"

  dev:run:
    desc: 🔥 Run Spring Boot app locally for debugging (with hot reload)
    dir: src/product-service
    cmds:
      - echo "🔥 Starting Spring Boot app with hot reload..."
      - echo "🌐 App will be available at http://localhost:8080/api/products"
      - echo "🔧 Set breakpoints in your IDE and attach debugger to port 5005"
      - mvn spring-boot:run -Dspring-boot.run.profiles=local -Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"

  dev:debug:
    desc: 🐛 Run with remote debugging enabled (suspends until debugger attached)
    dir: src/product-service
    cmds:
      - echo "🐛 Starting with remote debugging (waiting for debugger)..."
      - echo "🔌 Attach your IDE debugger to localhost:5005"
      - mvn spring-boot:run -Dspring-boot.run.profiles=local -Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005"

  dev:test:
    desc: 🧪 Test local API endpoints
    cmds:
      - echo "🧪 Testing local API endpoints..."
      - echo "📊 Health check:"
      - curl -s http://localhost:8080/api/health || echo "❌ Service not running"
      - echo ""
      - echo "📦 Get products:"
      - curl -s http://localhost:8080/api/products | jq '.' || echo "❌ Products endpoint failed"

  dev:stop:
    desc: 🛑 Stop local development environment
    cmds:
      - echo "🛑 Stopping local development environment..."
      - docker-compose -f docker-compose.local.yml down
      - echo "✅ Local environment stopped"

  dev:clean:
    desc: 🧹 Clean local development data
    cmds:
      - echo "🧹 Cleaning local development data..."
      - docker-compose -f docker-compose.local.yml down -v
      - docker volume prune -f
      - rm -rf local-data/
      - echo "✅ Local data cleaned"

  # 🏃 Full Development workflow
  dev:
    desc: 🏃 Full development workflow (test + native + deploy)
    cmds:
      - task: test
      - task: deploy:dev