openapi: 3.0.3
info:
  title: Product API
  description: REST API for product management in AWS Lambda
  version: 1.0.0
  contact:
    name: Product Service Team
    email: team@example.com

servers:
  - url: https://api.example.com/prod
    description: Production server
  - url: https://api.example.com/dev
    description: Development server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the service
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time

  /products:
    get:
      summary: Get all products
      description: Retrieve a list of all products
      operationId: getAllProducts
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new product
      description: Create a new product with the provided data
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update product
      description: Update an existing product
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete product
      description: Delete a product by its ID
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          description: Product unique identifier
          example: "123"
        name:
          type: string
          description: Product name
          example: "Laptop"
        description:
          type: string
          description: Product description
          example: "High-performance laptop"
        price:
          type: number
          format: double
          description: Product price
          example: 1299.99
        category:
          type: string
          description: Product category
          example: "Electronics"
        createdAt:
          type: string
          format: date-time
          description: Product creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Product last update timestamp

    ProductResponse:
      allOf:
        - $ref: '#/components/schemas/Product'

    ProductListResponse:
      type: object
      required:
        - products
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'

    CreateProductRequest:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          description: Product name
          example: "Laptop"
        description:
          type: string
          description: Product description
          example: "High-performance laptop"
        price:
          type: number
          format: double
          description: Product price
          example: 1299.99
        category:
          type: string
          description: Product category
          example: "Electronics"

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          description: Product name
          example: "Updated Laptop"
        description:
          type: string
          description: Product description
          example: "Updated high-performance laptop"
        price:
          type: number
          format: double
          description: Product price
          example: 1399.99
        category:
          type: string
          description: Product category
          example: "Electronics"

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - statusCode
      properties:
        error:
          type: string
          description: Error type
          example: "HTTP 404"
        message:
          type: string
          description: Error message
          example: "Product not found"
        statusCode:
          type: integer
          description: HTTP status code
          example: 404

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

security:
  - ApiKeyAuth: []